CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program? 
-Rock, Paper, Scissors - AI & Database Version

2. What real-world problem will your program address or help to solve? 
-This program enhances the traditional Rock, Paper, Scissors game by adding AI-based decision-making and integrating a database for storing game history. It helps users improve their strategy by tracking their past moves and analyzing patterns.

3. What will you learn from developing this program? 
   -Implementing a graphical user interface (GUI) using Tkinter.  
   - Using AI techniques to predict and counter the player's choices.  
   - Connecting a MySQL relational database to store game results.  
   - Integrating Firebase to sync and retrieve game data in real time.  
   - Structuring a Python program with reusable functions and database operations.


4. What Python modules will your program use?
    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)
   - `tkinter` – GUI for the game interface.  
   - `random` – Generate random choices for the computer when needed.  
   - `mysql.connector` – Connect and interact with a MySQL database.  
   - `firebase-admin` – Communicate with a Firebase database.  
   - `collections.defaultdict` – Track the player's move history. 

5. List the names of functions you will need?-
   - `connect_mysql()` – Establishes a connection to the MySQL database.  
   - `play(choice)` – Handles game logic, AI selection, and updates GUI labels.  
   - `ai_choice()` – Predicts the player's next move and selects the best counter.  
   - `determine_winner(player, computer)` – Determines the winner based on the game rules.  
   - `save_to_mysql(player, computer, result)` – Saves game results to the MySQL database.  
   - `save_to_firebase(player, computer, result)` – Saves game results to Firebase.  

    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

6. List the names of the test functions you will write.
   - `test_determine_winner()` – Tests if the game correctly identifies winners and draws.  
   - `test_ai_choice()` – Tests whether the AI chooses an appropriate counter-move.  
   - `test_save_to_mysql()` – Tests inserting game results into the MySQL database.  
   - `test_save_to_firebase()` – Tests saving data to Firebase.  
   - `test_connect_mysql()` – Tests whether the MySQL connection is successful.  



